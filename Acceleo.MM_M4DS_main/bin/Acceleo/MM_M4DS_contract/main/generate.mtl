[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('https://www.example.org/contract', 'https://www.example.org/workflow')]

[import Acceleo::MM_M4DS_Workflow::main::generate/]


[template public generateContract(aContract : Contract)]

[/template]

[template public generateCallContract(aContract : Contract, dc_name : String)]
[if (aContract._in.oclIsTypeOf(DataField))]
[let df : DataField = aContract._in.oclAsType(DataField)]

[if (aContract.oclIsTypeOf(ValueRange))]
[let vr : ValueRange = aContract.oclAsType(ValueRange)]
[for (v : Value | vr.value)]
[if (v.oclIsTypeOf(FixValue))]
	[let fv : FixValue = v.oclAsType(FixValue)]
[if (v.quantity <> null)]
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
if pre_post.checkFixValueRange([if (fv.dataType=DataType::String or fv.dataType=DataType::Time or fv.dataType=DataType::DateTime)]value='[fv.value/]'[else]value=[fv.value/][/if], dataDictionary=[dc_name/], belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), field='[df.dataField.displayName/]',
								quant_abs=[av.value/], quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if])):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')

		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
if pre_post.checkFixValueRange([if (fv.dataType=DataType::String or fv.dataType=DataType::Time or fv.dataType=DataType::DateTime)]value='[fv.value/]'[else]value=[fv.value/][/if], dataDictionary=[dc_name/], belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), field='[df.dataField.displayName/]',
								quant_rel=[per.percent/], quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if])):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')

		[/let]
	[/if]
	[else]
if pre_post.checkFixValueRange([if (fv.dataType=DataType::String or fv.dataType=DataType::Time or fv.dataType=DataType::DateTime)]value='[fv.value/]'[else]value=[fv.value/][/if], dataDictionary=[dc_name/], belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), field='[df.dataField.displayName/]',
								quant_abs=None, quant_rel=None, quant_op=None):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')

[/if]
	[/let]
[elseif (v.oclIsTypeOf(Interval))]
	[let inter : Interval = v.oclAsType(Interval)]
	[/let]
[elseif (v.oclIsTypeOf(DerivedValue))]
	[let inter : DerivedValue = v.oclAsType(DerivedValue)]
	[/let]
[elseif (v.oclIsTypeOf(NumOp))]
	[let nop : NumOp = v.oclAsType(NumOp)]
	[/let]
[elseif (v.oclIsTypeOf(SpecialValue))]
	[let sv : SpecialValue = v.oclAsType(SpecialValue)]
[if (v.quantity <> null)]
[if (sv.specialType=SpecialType::MISSING)]
missing_values_[aContract.name/]=['['/][if (vr._in.oclIsTypeOf(DataField))][let df : DataField = vr._in.oclAsType(DataField)][for (mv : ValueField | df.dataField.missingValues) separator(', ')][if (df.dataField.dataType=DataType::String or df.dataField.dataType=DataType::Time or df.dataField.dataType=DataType::DateTime)]'[mv.value/]'[else][mv.value/][/if][/for][/let][']'/][/if]
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
if pre_post.checkMissingRange(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								missing_values=missing_values_[aContract.name/],
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_abs=[av.value/]):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
if pre_post.checkMissingRange(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								missing_values=missing_values_[aContract.name/],
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_rel=[per.percent/]/100):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[/if]
[elseif (sv.specialType=SpecialType::INVALID)]
invalid_values_[aContract.name/]=['['/][if (vr._in.oclIsTypeOf(DataField))][let df : DataField = vr._in.oclAsType(DataField)][for (mv : ValueField | df.dataField.invalidValues) separator(', ')][mv.value/][/for][/let][']'/][/if]
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
if pre_post.checkInvalidValues(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								invalid_values=invalid_values_[aContract.name/],
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_abs=[av.value/]):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
if pre_post.checkInvalidValues(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								invalid_values=invalid_values_[aContract.name/],
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_rel=[per.percent/]/100):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[/if]
[elseif (sv.specialType=SpecialType::OUTLIER)]
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
if pre_post.checkOutliers(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_abs=[av.value/]):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
if pre_post.checkOutliers(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_rel=[per.percent/]/100):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[/if]
[/if]
[elseif (v.quantity = null)]
	[if (sv.specialType=SpecialType::MISSING)]
missing_values_[aContract.name/]=['['/][if (vr._in.oclIsTypeOf(DataField))][let df : DataField = vr._in.oclAsType(DataField)][for (mv : ValueField | df.dataField.missingValues) separator(', ')][if (df.dataField.dataType=DataType::String or df.dataField.dataType=DataType::Time or df.dataField.dataType=DataType::DateTime)]'[mv.value/]'[else][mv.value/][/if][/for][/let][']'/][/if]
if pre_post.checkMissingRange(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								missing_values=missing_values_[aContract.name/],
								quant_abs=None, quant_rel=None, quant_op=None):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
	[elseif (sv.specialType=SpecialType::INVALID)]
invalid_values_[aContract.name/]=['['/][if (vr._in.oclIsTypeOf(DataField))][let df : DataField = vr._in.oclAsType(DataField)][for (mv : ValueField | df.dataField.invalidValues) separator(', ')][mv.value/][/for][/let][']'/][/if]
if pre_post.checkInvalidValues(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								invalid_values=invalid_values_[aContract.name/],
								quant_abs=None, quant_rel=None, quant_op=None):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
	[elseif (sv.specialType=SpecialType::OUTLIER)]
if pre_post.checkOutliers(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dc_name/], field='[df.dataField.displayName/]', 
								quant_abs=None, quant_rel=None, quant_op=None):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
	[/if]
[/if]
	[/let]
[/if]
[/for]
[/let]
[/if]

[/let]
[elseif ((aContract._in.oclIsTypeOf(DataDictionary)))]
[let dd : DataDictionary = aContract._in.oclAsType(DataDictionary)]
[generateCallDataDicContract(aContract, dd.dataDictionary.name)/]
[/let]
[/if]
[/template]





[template public generateCallDataDicContract(aContract : Contract, dataDic_name : String)]
[if (aContract.oclIsTypeOf(ValueRange))]
[let vr : ValueRange = aContract.oclAsType(ValueRange)]
[for (v : Value | vr.value)]
[if (v.oclIsTypeOf(FixValue))]
	[let fv : FixValue = v.oclAsType(FixValue)]
[if (v.quantity <> null)]
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
if pre_post.checkFixValueRange([if (fv.dataType=DataType::String or fv.dataType=DataType::Time or fv.dataType=DataType::DateTime)]value='[fv.value/]'[else]value=[fv.value/][/if], dataDictionary=[dataDic_name/], belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), field=None,
								quant_abs=[av.value/], quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if])):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')

		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
if pre_post.checkFixValueRange([if (fv.dataType=DataType::String or fv.dataType=DataType::Time or fv.dataType=DataType::DateTime)]value='[fv.value/]'[else]value=[fv.value/][/if], dataDictionary=[dataDic_name/], belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), field=None,
								quant_rel=[per.percent/], quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if])):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')

		[/let]
	[/if]
	[else]
if pre_post.checkFixValueRange([if (fv.dataType=DataType::String or fv.dataType=DataType::Time or fv.dataType=DataType::DateTime)]value='[fv.value/]'[else]value=[fv.value/][/if], dataDictionary=[dataDic_name/], belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), field=None,
								quant_abs=None, quant_rel=None, quant_op=None):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')

[/if]
	[/let]
[elseif (v.oclIsTypeOf(Interval))]
	[let inter : Interval = v.oclAsType(Interval)]
	[/let]
[elseif (v.oclIsTypeOf(DerivedValue))]
	[let inter : DerivedValue = v.oclAsType(DerivedValue)]
	[/let]
[elseif (v.oclIsTypeOf(NumOp))]
	[let nop : NumOp = v.oclAsType(NumOp)]
	[/let]
[elseif (v.oclIsTypeOf(SpecialValue))]
	[let sv : SpecialValue = v.oclAsType(SpecialValue)]
[if (v.quantity <> null)]
[if (sv.specialType=SpecialType::MISSING)]
missing_values_[aContract.name/]=None
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
if pre_post.checkMissingRange(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								missing_values=missing_values_[aContract.name/],
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_abs=[av.value/]):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
if pre_post.checkMissingRange(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								missing_values=missing_values_[aContract.name/],
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_rel=[per.percent/]/100):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[/if]
[elseif (sv.specialType=SpecialType::INVALID)]
invalid_values_[aContract.name/]=None
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
if pre_post.checkInvalidValues(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								invalid_values=invalid_values_[aContract.name/],
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_abs=[av.value/]):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
if pre_post.checkInvalidValues(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								invalid_values=invalid_values_[aContract.name/],
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_rel=[per.percent/]/100):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[/if]
[elseif (sv.specialType=SpecialType::OUTLIER)]
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
if pre_post.checkOutliers(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_abs=[av.value/]):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
if pre_post.checkOutliers(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								quant_op=Operator([if(v.quantity.operator=Operator::greatherEqual)]0[elseif(v.quantity.operator=Operator::greather)]1[elseif(v.quantity.operator=Operator::lessEqual)]2[elseif(v.quantity.operator=Operator::less)]3[elseif(v.quantity.operator=Operator::equal)]4[/if]), quant_rel=[per.percent/]/100):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
		[/let]
	[/if]
[/if]
[elseif (v.quantity = null)]
	[if (sv.specialType=SpecialType::MISSING)]
missing_values_[aContract.name/]=None
if pre_post.checkMissingRange(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								missing_values=missing_values_[aContract.name/],
								quant_abs=None, quant_rel=None, quant_op=None):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
	[elseif (sv.specialType=SpecialType::INVALID)]
invalid_values_[aContract.name/]=None
if pre_post.checkInvalidValues(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								invalid_values=invalid_values_[aContract.name/],
								quant_abs=None, quant_rel=None, quant_op=None):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
	[elseif (sv.specialType=SpecialType::OUTLIER)]
if pre_post.checkOutliers(belongOp=Belong([if (vr.belongOp=BelongOp::BELONG)]0[else]1[/if]), dataDictionary=[dataDic_name/], field=None, 
								quant_abs=None, quant_rel=None, quant_op=None):
	print('Precondition call returned TRUE')
else:
	print('Precondition call returned FALSE')
	[/if]
[/if]
	[/let]
[/if]
[/for]
[/let]
[/if]
[/template]




























[template public generateDebugContract(aContract : Contract)]

[if (aContract._in.oclIsTypeOf(DataDictionary))]
[let dd : DataDictionary = aContract._in.oclAsType(DataDictionary)]
print('[dd.dataDictionary.name/]')		#DataDictionary _in
print('[dd.dataDictionaryDef.name/]')		#DataDictionaryDef _in
[/let]
[elseif (aContract._in.oclIsTypeOf(DataField))]
[let df : DataField = aContract._in.oclAsType(DataField)]
print('[df.name/]')		#dataField name _in
print('[df.dataField.name/]')		#dataField _in
print('[df.dataFieldDef.name/]')		#dataFieldDef _in
[/let]
[/if]
[if (aContract.out <> null)]
	[if (aContract.out.oclIsTypeOf(DataDictionary))]
[let dd : DataDictionary = aContract.out.oclAsType(DataDictionary)]
print('[dd.dataDictionary.name/]')		#DataDictionary out
print('[dd.dataDictionaryDef.name/]')		#DataDictionaryDef out
[/let]
	[elseif (aContract.out.oclIsTypeOf(DataField))]
[let df : DataField = aContract.out.oclAsType(DataField)]
print('[df.name/]')		#dataField name out
print('[df.dataField.name/]')		#dataField out
print('[df.dataFieldDef.name/]')		#dataFieldDef out
[/let]
	[/if]
[/if]


[if (aContract.oclIsTypeOf(Condition))]
[let cond : Condition = aContract.oclAsType(Condition)]
print('[cond.conditionDef.name/]')			#Condition
[/let]
[elseif (aContract.oclIsTypeOf(FieldRange))]
[let fr : FieldRange = aContract.oclAsType(FieldRange)]
print('[fr.belongOp/]')			#FieldRange
print('[fr.type/]')				#Type in Contract
print('[fr.name/]')		#Name in Contract
print('[fr.fieldRangeDef.name/]')		#FieldRangeDef name
[for (f : Field | fr.field)]
print('[f.dataField.name/]')		#Field in Field/FieldRange
[/for]
[/let]
[elseif (aContract.oclIsTypeOf(ValueRange))]
[let vr : ValueRange = aContract.oclAsType(ValueRange)]
print('[vr.belongOp/]')			#ValueRange
print('[vr.type/]')		#Type in Contract
print('[vr.name/]')		#Name in Contract
print('[vr.valueRangeDef.name/]')	#ValueRangeDef name
[for (v : Value | vr.value)]
[if (v.oclIsTypeOf(FixValue))]
	[let fv : FixValue = v.oclAsType(FixValue)]
	print('[fv.value/]')	#FixValue value
	print('[fv.dataType/]')	#FixValue DataType
	print('[fv.valueFieldDef.name/]')	#FixValue valueFieldDef name
	[/let]
[elseif (v.oclIsTypeOf(Interval))]
	[let inter : Interval = v.oclAsType(Interval)]
	print('[inter.leftMargin/]')	#Interval leftMargin
	print('[inter.rightMargin/]')	#Interval rightMargin
	print('[inter.closureType/]')	#Interval ClosureType
	print('[inter.intervalDef.name/]')	#Interval intervalDef name
	[/let]
[elseif (v.oclIsTypeOf(DerivedValue))]
	[let inter : DerivedValue = v.oclAsType(DerivedValue)]
	print('[inter.type/]')		#DerivedValue type
	print('[inter.derivedValueDef.name/]')	#DerivedValue derivedValueDef name
	[/let]
[elseif (v.oclIsTypeOf(NumOp))]
	[let nop : NumOp = v.oclAsType(NumOp)]
	print('[nop.operation/]')		#NumOp operation
	print('[nop.numOpDef.name/]')	#NumOp numOpDef name
	[/let]
[elseif (v.oclIsTypeOf(SpecialValue))]
	[let sv : SpecialValue = v.oclAsType(SpecialValue)]
	print('[sv.specialType/]')		#SpecialValue specialType
	print('[sv.specialValueDef.name/]')	#SpecialValue specialValueDef name
	[/let]
[/if]
[if (v.quantity <> null)]
	print('[v.quantity.operator/]')
	[if(v.quantity.oclIsTypeOf(AbsoluteValue))]
		[let av : AbsoluteValue = v.quantity.oclAsType(AbsoluteValue)]
		print('[av.value/]')	#AbsoluteValue value
		print('[av.absoluteValueDef.name/]')	#AbsoluteValueDef name
		[/let]
	[elseif (v.quantity.oclIsTypeOf(Percent))]
		[let per : Percent = v.quantity.oclAsType(Percent)]
		print('[per.percent/]')		#Percent percent
		print('[per.percentDef.name/]')		#PercentDef name
		[/let]
	[/if]
[/if]
[/for]
[/let]
[elseif (aContract.oclIsTypeOf(Condition))]
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
[let condition : Condition = aContract.oclAsType(Condition)]
print('[condition.conditionDef.name/]')		#Condition conditionDef name
[/let]
[/if]


[/template]






































